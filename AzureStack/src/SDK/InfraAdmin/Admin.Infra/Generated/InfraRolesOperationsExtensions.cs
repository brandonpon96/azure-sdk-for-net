// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Infra.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Infra;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InfraRolesOperations.
    /// </summary>
    public static partial class InfraRolesOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static IPage<InfraRole> List(this IInfraRolesOperations operations, string region)
            {
                return operations.ListAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRole>> ListAsync(this IInfraRolesOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            public static InfraRoleInstance GetInstance(this IInfraRolesOperations operations, string region, string roleName)
            {
                return operations.GetInstanceAsync(region, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfraRoleInstance> GetInstanceAsync(this IInfraRolesOperations operations, string region, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceWithHttpMessagesAsync(region, roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static IPage<InfraRoleInstance> ListInstances(this IInfraRolesOperations operations, string region)
            {
                return operations.ListInstancesAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRoleInstance>> ListInstancesAsync(this IInfraRolesOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstancesWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            public static void StartInstance(this IInfraRolesOperations operations, string region, string roleName)
            {
                operations.StartInstanceAsync(region, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartInstanceAsync(this IInfraRolesOperations operations, string region, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartInstanceWithHttpMessagesAsync(region, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            public static void StopInstance(this IInfraRolesOperations operations, string region, string roleName)
            {
                operations.StopInstanceAsync(region, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopInstanceAsync(this IInfraRolesOperations operations, string region, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopInstanceWithHttpMessagesAsync(region, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            public static void RestartInstance(this IInfraRolesOperations operations, string region, string roleName)
            {
                operations.RestartInstanceAsync(region, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='roleName'>
            /// Name of the infrastructure role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartInstanceAsync(this IInfraRolesOperations operations, string region, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartInstanceWithHttpMessagesAsync(region, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InfraRole> ListNext(this IInfraRolesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRole>> ListNextAsync(this IInfraRolesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InfraRoleInstance> ListInstancesNext(this IInfraRolesOperations operations, string nextPageLink)
            {
                return operations.ListInstancesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRoleInstance>> ListInstancesNextAsync(this IInfraRolesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstancesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
